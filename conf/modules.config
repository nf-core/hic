process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //**********************************************
    // PREPARE_GENOME
    withName: 'BOWTIE2_BUILD' {
        publishDir = [
            path: { "${params.outdir}/genome/bowtie2" },
            mode: 'copy',
            enabled: params.save_reference
        ]
    }

    withName: 'BWA_INDEX' {
        publishDir = [
            path: { "${params.outdir}/genome/bwa" },
            mode: 'copy',
            enabled: params.save_reference
        ]
    }

    withName: 'CUSTOM_GETCHROMSIZES' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            enabled: params.save_reference
        ]
    }

    withName: 'GET_RESTRICTION_FRAGMENTS' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            enabled: params.save_reference
        ]
        ext.args = params.processing == "hicpro" ? '--extra' : ''
    }

    //*******************************************
    // HICPRO
    withName: 'BOWTIE2_ALIGN' {
        publishDir = [
            path: { "${params.outdir}/hicpro/mapping" },
            mode: 'copy',
            enabled: params.save_aligned_intermediates
        ]
        ext.prefix = { "${meta.id}_${meta.chunk}_${meta.mates}" }
        ext.args = params.bwt2_opts_end2end ?: ''
        ext.args2 = !params.dnase ? "-F 4" :""
    }

    withName: 'TRIM_READS' {
        publishDir = [
            path: { "${params.outdir}/hicpro/mapping/" },
            mode: 'copy',
            enabled: params.save_aligned_intermediates
        ]
    }

    withName: 'BOWTIE2_ALIGN_TRIMMED' {
        publishDir = [
            path: { "${params.outdir}/hicpro/mapping" },
            mode: 'copy',
            enabled: params.save_aligned_intermediates
        ]
        ext.prefix = { "${meta.id}_${meta.chunk}_${meta.mates}_trimmed" }
        ext.args = params.bwt2_opts_trimmed ?: ''
        ext.args2 = ""
    }

    withName: 'MERGE_BOWTIE2' {
        publishDir = [
            path: { "${params.outdir}/hicpro/mapping" },
            mode: 'copy',
            enabled: params.save_aligned_intermediates
        ]
        ext.prefix = { "${meta.id}_${meta.chunk}_${meta.mates}" }
    }

    withName: 'COMBINE_MATES' {
        publishDir = [
            path: { "${params.outdir}/hicpro/mapping" },
            mode: 'copy',
            pattern: '*.bam'
        ]
        ext.args = [
            "-t",
            params.keep_multi ? "--multi" : "",
            params.min_mapq ? "-q ${params.min_mapq}" : ""
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.chunk}" }
    }

    withName: 'GET_VALID_INTERACTION' {
        publishDir = [
            path: { "${params.outdir}/hicpro/valid_pairs" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename},
            mode: 'copy',
            enabled: params.save_pairs_intermediates
        ]
        ext.args = { [
            params.min_cis_dist > 0 ? " -d ${params.min_cis_dist}" : '',
            params.min_insert_size > 0 ?  " -s ${params.min_insert_size}" : '',
            params.max_insert_size > 0 ? " -l ${params.max_insert_size}" : '',
            params.min_restriction_fragment_size > 0 ? " -t ${params.min_restriction_fragment_size}" : '',
            params.max_restriction_fragment_size > 0 ? " -m ${params.max_restriction_fragment_size}" : '',
            params.save_interaction_bam ? " --sam" : ''
        ].join(' ').trim() }
    }

    withName: 'GET_VALID_INTERACTION_DNASE' {
        publishDir = [
            path: { "${params.outdir}/hicpro/valid_pairs" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy',
            enabled: params.save_pairs_intermediates
        ]
        ext.args = { params.min_cis_dist > 0 ? " -d ${params.min_cis_dist}" : "" }
    }

    withName: 'MERGE_VALID_INTERACTION' {
        publishDir = [
            [
                path: { "${params.outdir}/hicpro/stats/${meta.id}" },
                mode: 'copy',
                pattern: "*stat"
            ],
            [
                path: { "${params.outdir}/hicpro/valid_pairs" },
                mode: 'copy',
                pattern: "*Pairs"
            ]
        ]
        ext.args = { params.keep_dups ? '' : '-d' }
    }

    withName: 'MERGE_STATS' {
        publishDir = [
            path: { "${params.outdir}/hicpro/stats/${meta.id}" },
            mode: 'copy',
            pattern: "*stat"
        ]
    }

    withName: 'HICPRO2PAIRS' {
        publishDir = [
            path: { "${params.outdir}/hicpro/valid_pairs/pairix/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy'
        ]
    }

    withName: 'BUILD_CONTACT_MAPS' {
        publishDir = [
            path: { "${params.outdir}/hicpro/matrix/raw" },
            mode: 'copy',
            enabled: params.hicpro_maps
        ]
        ext.prefix = { "${meta.id}.${resolution}" }
    }

    withName: 'ICE_NORMALIZATION' {
        publishDir = [
            path: { "${params.outdir}/hicpro/matrix/iced" },
            mode: 'copy',
            enabled: params.hicpro_maps
        ]
    }

    //*******************************************
    // PAIRTOOLS

    withName: 'BWA_MEM' {
        publishDir = [
            path: { "${params.outdir}/bwa" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy',
            enabled: params.save_aligned_intermediates
        ]
        ext.args = params.bwa_opts ?: ''
    }

    withName: 'PAIRTOOLS_PARSE' {
        publishDir = [
            path: { "${params.outdir}/pairtools/stats/" },
            mode: 'copy',
            pattern: "*pairsam.stat"
        ]
        ext.args = { [
            '--add-columns mapq',
            params.save_interaction_bam ? '' : '--drop-sam --drop-seq',
            params.pairtools_parse_opts ?: ''
        ].join(' ').trim() }
        ext.prefix = { "${meta.id}_${meta.chunk}" }
    }

    withName: 'PAIRTOOLS_RESTRICT' {
        publishDir = [
            enabled: false
        ]
        ext.prefix = { "${meta.id}_${meta.chunk}_restrict" }
        ext.when = !params.dnase
    }

    withName: 'PAIRTOOLS_SORT' {
        publishDir = [
            enabled: false
        ]
        ext.prefix = { "${meta.id}_${meta.chunk}_sorted" }
        ext.args = { "--tmpdir ./" }
    }

    withName: 'PAIRTOOLS_MERGE' {
        publishDir = [
            enabled: false
        ]
        ext.prefix = { "${meta.id}_merged" }
    }

    withName: 'PAIRTOOLS_SPLIT' {
        publishDir = [
            path: { "${params.outdir}/pairtools" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy',
            pattern: "*pairs.gz",
            enabled: params.save_pairs_intermediates
        ]
        ext.args = { params.save_interaction_bam ? "--output-sam ${meta.id}_pairtools.bam" : '' }
    }

    withName: 'SAMTOOLS_SORT' {
        publishDir = [
            path: { "${params.outdir}/pairtools" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy',
            enabled: params.save_pairs_intermediates
        ]
        ext.prefix = { "${meta.id}_pairtools_sorted" }
    }

    withName: 'SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/pairtools" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy',
            enabled: params.save_pairs_intermediates
        ]
    }

    withName: 'PAIRTOOLS_DEDUP' {
        publishDir = [
            path: { "${params.outdir}/pairtools/stats/" },
            mode: 'copy',
            pattern: "*.pairs.stat"
        ]
        ext.args = { "--mark-dups" }
        ext.prefix = { "${meta.id}_dedup" }
        ext.when = !params.keep_dups
    }

    withName: 'PAIRTOOLS_SELECT' {
        publishDir = [
            path: { "${params.outdir}/pairtools/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy',
            pattern: "*pairs.gz"
        ]
        ext.args = { [
            params.min_mapq > 0 ? "(mapq1>${params.min_mapq} and mapq2>${params.min_mapq})" : '',
            params.min_cis_dist > 0 ? " and ((chrom1==chrom2 and abs(pos1-pos2) > ${params.min_cis_dist}) or chrom1!=chrom2)" : '',
            params.keep_multi ? " and ((pair_type.upper()=='UU') or (pair_type.upper()=='UR') or (pair_type.upper()=='RU') or (pair_type.upper()=='MM') or (pair_type.upper()=='MU'))" : " and ((pair_type.upper()=='UU') or (pair_type.upper()=='UR') or (pair_type.upper()=='RU'))",
            params.dnase ? '' : " and ((chrom1==chrom2 and abs(int(rfrag1) - int(rfrag2)) > 1) or chrom1!=chrom2)",
            //params.min_insert_size > 0 ?  " and ( (rfrag_end1 - r1pos) + (rfrag_end2 - r2pos)) > ${params.min_insert_size}" : '',
            //params.max_insert_size > 0 ? " and ( (rfrag_end1 - r1pos) + (rfrag_end2 - r2pos)) < ${params.max_insert_size}" : '',
            //params.min_restriction_fragment_size > 0 ? " -t ${params.min_restriction_fragment_size}" : '',
            //params.max_restriction_fragment_size > 0 ? " -m ${params.max_restriction_fragment_size}" : '',
        ].join(' ').trim() }
    }

    withName: 'PAIRTOOLS_STATS' {
        publishDir = [
            path: { "${params.outdir}/pairtools/stats/" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}_select.pairs.stat" }
    }

    withName: 'PAIRIX' {
        publishDir = [
            path: { "${params.outdir}/pairtools" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy'
        ]
    }

    //*****************************************
    // QUALITY METRICS

    withName: 'HIC_PLOT_DIST_VS_COUNTS'{
        publishDir = [
            path: { "${params.outdir}/distance_decay/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy'
        ]
    }

    //*****************************************
    // COOLER

    withName: 'COOLER_MAKEBINS' {
        publishDir = [
            path: { "${params.outdir}/contact_maps/bins/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy'
        ]
        ext.prefix={ "cooler_bins_${cool_bin}" }
    }

    withName: 'COOLER_CLOAD' {
        publishDir = [
            path: { "${params.outdir}/contact_maps/cool/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy',
            enabled : params.save_raw_maps
        ]
        ext.prefix = { "${meta.id}.${cool_bin}" }
        ext.args = "pairs -c1 2 -p1 3 -c2 4 -p2 5"
    }

    withName: 'COOLER_BALANCE' {
        publishDir = [
            path: { "${params.outdir}/contact_maps/cool/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy'
        ]
        ext.args = '--force'
        ext.args = params.balancing_opts ?: ''
        ext.prefix = { "${cool.baseName}_balanced" }
    }

    withName: 'COOLER_DUMP' {
        publishDir = [
            enabled: false
        ]
        ext.prefix = { "${cool.baseName}" }
        ext.args = "--one-based-ids --balanced --na-rep 0"
    }

    withName:'SPLIT_COOLER_DUMP' {
        publishDir = [
            [
                path: { "${params.outdir}/contact_maps/txt/" },
                mode: 'copy',
                pattern: "*_raw.txt",
                enabled: params.save_raw_maps
            ],
            [
                path: { "${params.outdir}/contact_maps/txt/" },
                mode: 'copy',
                pattern: "*_balanced.txt"
            ]
        ]
    }

    withName: 'COOLER_ZOOMIFY' {
        publishDir = [
            path: { "${params.outdir}/contact_maps/cool/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy'
        ]
        ext.args = "--balance"
    }

    //********************************
    // COMPARTMENTS

    withName: 'COOLTOOLS_EIGSCIS' {
        publishDir = [
            path: { "${params.outdir}/compartments/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy'
        ]
        ext.args = '--bigwig'
        ext.prefix = { "${meta.id}.${resolution}" }
    }

    //********************************
    // TADS

    withName: 'COOLTOOLS_INSULATION' {
        publishDir = [
            path: { "${params.outdir}/tads/insulation/" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy'
        ]
        ext.args = '15 25 50 --window-pixels'
        ext.prefix = { "${cool.baseName}" }
    }

    withName: 'HIC_FIND_TADS' {
        publishDir = [
            path: { "${params.outdir}/tads/hicExplorer" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: 'copy'
        ]
        ext.args = '--correctForMultipleTesting fdr'
        ext.prefix = { "${cool.baseName}" }
    }
}
